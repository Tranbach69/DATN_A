// <auto-generated />
using System;
using DATN.Infastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DATN.Infastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221207021513_dbInit")]
    partial class dbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DATN.Core.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AccountAdmin");
                });

            modelBuilder.Entity("DATN.Core.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentShop")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WarrantyPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("DATN.Core.Entities.Ethernet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BringUpdownEn")
                        .HasColumnType("text");

                    b.Property<string>("DriverEn")
                        .HasColumnType("text");

                    b.Property<string>("DriverType")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<string>("IpAddr")
                        .HasColumnType("text");

                    b.Property<string>("IpStaticEn")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Netmask")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Ethernet");
                });

            modelBuilder.Entity("DATN.Core.Entities.Gps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accuracy")
                        .HasColumnType("text");

                    b.Property<string>("Altitude")
                        .HasColumnType("text");

                    b.Property<string>("Bearing")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Speed")
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Gps");
                });

            modelBuilder.Entity("DATN.Core.Entities.Lte4g", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Afrcn")
                        .HasColumnType("text");

                    b.Property<string>("Current4GData")
                        .HasColumnType("text");

                    b.Property<string>("FreqBand")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationAreaCode")
                        .HasColumnType("text");

                    b.Property<string>("MobileCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("MobileNetworkCode")
                        .HasColumnType("text");

                    b.Property<string>("OperationMode")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Rssi4G")
                        .HasColumnType("text");

                    b.Property<string>("ServiceCellId")
                        .HasColumnType("text");

                    b.Property<string>("SimIccid")
                        .HasColumnType("text");

                    b.Property<string>("SimImsi")
                        .HasColumnType("text");

                    b.Property<string>("SimStatus")
                        .HasColumnType("text");

                    b.Property<string>("SystemMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Lte4g");
                });

            modelBuilder.Entity("DATN.Core.Entities.StationWifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StaIp")
                        .HasColumnType("text");

                    b.Property<int>("StaPassword")
                        .HasColumnType("integer");

                    b.Property<string>("StaProtocol")
                        .HasColumnType("text");

                    b.Property<string>("StaSecurity")
                        .HasColumnType("text");

                    b.Property<string>("StaSsidExt")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("StationWifi");
                });

            modelBuilder.Entity("DATN.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DATN.Core.Entities.Wifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthPwd")
                        .HasColumnType("text");

                    b.Property<string>("AuthType")
                        .HasColumnType("text");

                    b.Property<string>("BroadCast")
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .HasColumnType("text");

                    b.Property<string>("ChannelMode")
                        .HasColumnType("text");

                    b.Property<int>("ClientCount")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentAp")
                        .HasColumnType("text");

                    b.Property<string>("DhcpEndIp")
                        .HasColumnType("text");

                    b.Property<string>("DhcpHostIp")
                        .HasColumnType("text");

                    b.Property<string>("DhcpStartIp")
                        .HasColumnType("text");

                    b.Property<string>("DhcpTime")
                        .HasColumnType("text");

                    b.Property<string>("EncryptMode")
                        .HasColumnType("text");

                    b.Property<string>("Imei")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Isolation")
                        .HasColumnType("text");

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<string>("Ssid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WifiMode")
                        .HasColumnType("text");

                    b.Property<string>("WifiNat")
                        .HasColumnType("text");

                    b.Property<string>("WifiOpen")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wifi");
                });
#pragma warning restore 612, 618
        }
    }
}
